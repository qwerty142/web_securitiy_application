/*
 * This file is generated by jOOQ.
 */
package org.example.repositories.jooqGenEntities.tables;


import org.example.repositories.jooqGenEntities.Keys;
import org.example.repositories.jooqGenEntities.Public;
import org.example.repositories.jooqGenEntities.tables.CatCat.CatCatPath;
import org.example.repositories.jooqGenEntities.tables.records.CatRecord;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cat extends TableImpl<CatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cat</code>
     */
    public static final Cat CAT = new Cat();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<CatRecord> getRecordType() {
        return CatRecord.class;
    }

    /**
     * The column <code>public.cat.cat_id</code>.
     */
    public final TableField<CatRecord, Long> CAT_ID = createField(DSL.name("cat_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.cat.birth_date</code>.
     */
    public final TableField<CatRecord, LocalDateTime> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.cat.breed</code>.
     */
    public final TableField<CatRecord, String> BREED = createField(DSL.name("breed"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.cat.color</code>.
     */
    public final TableField<CatRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.cat.owner_id</code>.
     */
    public final TableField<CatRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT, this, "");

    private Cat(Name alias, Table<CatRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cat(Name alias, Table<CatRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.cat</code> table reference
     */
    public Cat(String alias) {
        this(DSL.name(alias), CAT);
    }

    /**
     * Create an aliased <code>public.cat</code> table reference
     */
    public Cat(Name alias) {
        this(alias, CAT);
    }

    /**
     * Create a <code>public.cat</code> table reference
     */
    public Cat() {
        this(DSL.name("cat"), null);
    }

    public <O extends Record> Cat(Table<O> path, ForeignKey<O, CatRecord> childPath, InverseForeignKey<O, CatRecord> parentPath) {
        super(path, childPath, parentPath, CAT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CatPath extends Cat implements Path<CatRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CatPath(Table<O> path, ForeignKey<O, CatRecord> childPath, InverseForeignKey<O, CatRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CatPath(Name alias, Table<CatRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CatPath as(String alias) {
            return new CatPath(DSL.name(alias), this);
        }

        @Override
        public CatPath as(Name alias) {
            return new CatPath(alias, this);
        }

        @Override
        public CatPath as(Table<?> alias) {
            return new CatPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public Identity<CatRecord, Long> getIdentity() {
        return (Identity<CatRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<CatRecord> getPrimaryKey() {
        return Keys.CAT_PKEY;
    }

    private transient CatCatPath _fklgvuc33ev72xtxhi9ymnsgkox;

    /**
     * Get the implicit to-many join path to the <code>public.cat_cat</code>
     * table, via the <code>fklgvuc33ev72xtxhi9ymnsgkox</code> key
     */
    public CatCatPath fklgvuc33ev72xtxhi9ymnsgkox() {
        if (_fklgvuc33ev72xtxhi9ymnsgkox == null)
            _fklgvuc33ev72xtxhi9ymnsgkox = new CatCatPath(this, null, Keys.CAT_CAT__FKLGVUC33EV72XTXHI9YMNSGKOX.getInverseKey());

        return _fklgvuc33ev72xtxhi9ymnsgkox;
    }

    private transient CatCatPath _fkqhokqxu4as6q9gqyo895j8p9w;

    /**
     * Get the implicit to-many join path to the <code>public.cat_cat</code>
     * table, via the <code>fkqhokqxu4as6q9gqyo895j8p9w</code> key
     */
    public CatCatPath fkqhokqxu4as6q9gqyo895j8p9w() {
        if (_fkqhokqxu4as6q9gqyo895j8p9w == null)
            _fkqhokqxu4as6q9gqyo895j8p9w = new CatCatPath(this, null, Keys.CAT_CAT__FKQHOKQXU4AS6Q9GQYO895J8P9W.getInverseKey());

        return _fkqhokqxu4as6q9gqyo895j8p9w;
    }

    @Override
    @NotNull
    public Cat as(String alias) {
        return new Cat(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Cat as(Name alias) {
        return new Cat(alias, this);
    }

    @Override
    @NotNull
    public Cat as(Table<?> alias) {
        return new Cat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Cat rename(String name) {
        return new Cat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Cat rename(Name name) {
        return new Cat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Cat rename(Table<?> name) {
        return new Cat(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Cat where(Condition condition) {
        return new Cat(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Cat where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Cat where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Cat where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Cat where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Cat where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Cat where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public Cat where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Cat whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public Cat whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
