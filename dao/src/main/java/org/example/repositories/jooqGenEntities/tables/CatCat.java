/*
 * This file is generated by jOOQ.
 */
package org.example.repositories.jooqGenEntities.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.annotation.processing.Generated;

import org.example.repositories.jooqGenEntities.Keys;
import org.example.repositories.jooqGenEntities.Public;
import org.example.repositories.jooqGenEntities.tables.Cat.CatPath;
import org.example.repositories.jooqGenEntities.tables.records.CatCatRecord;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CatCat extends TableImpl<CatCatRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cat_cat</code>
     */
    public static final CatCat CAT_CAT = new CatCat();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<CatCatRecord> getRecordType() {
        return CatCatRecord.class;
    }

    /**
     * The column <code>public.cat_cat.cat1_id</code>.
     */
    public final TableField<CatCatRecord, Long> CAT1_ID = createField(DSL.name("cat1_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.cat_cat.cat2_id</code>.
     */
    public final TableField<CatCatRecord, Long> CAT2_ID = createField(DSL.name("cat2_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private CatCat(Name alias, Table<CatCatRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CatCat(Name alias, Table<CatCatRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.cat_cat</code> table reference
     */
    public CatCat(String alias) {
        this(DSL.name(alias), CAT_CAT);
    }

    /**
     * Create an aliased <code>public.cat_cat</code> table reference
     */
    public CatCat(Name alias) {
        this(alias, CAT_CAT);
    }

    /**
     * Create a <code>public.cat_cat</code> table reference
     */
    public CatCat() {
        this(DSL.name("cat_cat"), null);
    }

    public <O extends Record> CatCat(Table<O> path, ForeignKey<O, CatCatRecord> childPath, InverseForeignKey<O, CatCatRecord> parentPath) {
        super(path, childPath, parentPath, CAT_CAT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CatCatPath extends CatCat implements Path<CatCatRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CatCatPath(Table<O> path, ForeignKey<O, CatCatRecord> childPath, InverseForeignKey<O, CatCatRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CatCatPath(Name alias, Table<CatCatRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CatCatPath as(String alias) {
            return new CatCatPath(DSL.name(alias), this);
        }

        @Override
        public CatCatPath as(Name alias) {
            return new CatCatPath(alias, this);
        }

        @Override
        public CatCatPath as(Table<?> alias) {
            return new CatCatPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public List<ForeignKey<CatCatRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CAT_CAT__FKQHOKQXU4AS6Q9GQYO895J8P9W, Keys.CAT_CAT__FKLGVUC33EV72XTXHI9YMNSGKOX);
    }

    private transient CatPath _fkqhokqxu4as6q9gqyo895j8p9w;

    /**
     * Get the implicit join path to the <code>public.cat</code> table, via the
     * <code>fkqhokqxu4as6q9gqyo895j8p9w</code> key.
     */
    public CatPath fkqhokqxu4as6q9gqyo895j8p9w() {
        if (_fkqhokqxu4as6q9gqyo895j8p9w == null)
            _fkqhokqxu4as6q9gqyo895j8p9w = new CatPath(this, Keys.CAT_CAT__FKQHOKQXU4AS6Q9GQYO895J8P9W, null);

        return _fkqhokqxu4as6q9gqyo895j8p9w;
    }

    private transient CatPath _fklgvuc33ev72xtxhi9ymnsgkox;

    /**
     * Get the implicit join path to the <code>public.cat</code> table, via the
     * <code>fklgvuc33ev72xtxhi9ymnsgkox</code> key.
     */
    public CatPath fklgvuc33ev72xtxhi9ymnsgkox() {
        if (_fklgvuc33ev72xtxhi9ymnsgkox == null)
            _fklgvuc33ev72xtxhi9ymnsgkox = new CatPath(this, Keys.CAT_CAT__FKLGVUC33EV72XTXHI9YMNSGKOX, null);

        return _fklgvuc33ev72xtxhi9ymnsgkox;
    }

    @Override
    @NotNull
    public CatCat as(String alias) {
        return new CatCat(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public CatCat as(Name alias) {
        return new CatCat(alias, this);
    }

    @Override
    @NotNull
    public CatCat as(Table<?> alias) {
        return new CatCat(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public CatCat rename(String name) {
        return new CatCat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public CatCat rename(Name name) {
        return new CatCat(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public CatCat rename(Table<?> name) {
        return new CatCat(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public CatCat where(Condition condition) {
        return new CatCat(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public CatCat where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public CatCat where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public CatCat where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public CatCat where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public CatCat where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public CatCat where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public CatCat where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public CatCat whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public CatCat whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
